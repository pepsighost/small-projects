# Kate's "casino"

# A beginner-level game of blackjack, one deck, no splitting
# When I get good enough, I think I might turn this into a mini app or something that includes multiple card games.


import random

class Card:

	def __init__(self, name, value):
		self.name = name
		self.value = value

AD = Card("ADiamonds",11)
AC = Card("AClubs",11)
AH = Card("AHearts",11)
AS = Card("ASpades",11)
TwoD = Card("2Diamonds",2)
TwoC = Card("2Clubs",2)
TwoH = Card("2Hearts",2)
TwoS = Card("2Spades",2)
ThrD = Card("3Diamonds",3)
ThrC = Card("3Clubs",3)
ThrH = Card("3Hearts",3)
ThrS = Card("3Spades",3)
FouD = Card("4Diamonds",4)
FouC = Card("4Clubs",4)
FouH = Card("4Hearts",4)
FouS = Card("4Spades",4)
FivD = Card("5Diamonds",5)
FivC = Card("5Clubs",5)
FivH = Card("5Hearts",5)
FivS = Card("5Spades",5)
SixD = Card("6Diamonds",6)
SixC = Card("6Clubs",6)
SixH = Card("6Hearts",6)
SixS = Card("6Spades",6)
SevD = Card("7Diamonds",7)
SevC = Card("7Clubs",7)
SevH = Card("7Hearts",7)
SevS = Card("7Spades",7)
EigD = Card("8Diamonds",8)
EigC = Card("8Clubs",8)
EigH = Card("8Hearts",8)
EigS = Card("8Spades",8)
NinD = Card("9Diamonds",9)
NinC = Card("9Clubs",9)
NinH = Card("9Hearts",9)
NinS = Card("9Spades",9)
TenD = Card("10Diamonds",10)
TenC = Card("10Clubs",10)
TenH = Card("10Hearts",10)
TenS = Card("10Spades",10)
JacD = Card("JDiamonds",10)
JacC = Card("JClubs",10)
JacH = Card("JHearts",10)
JacS = Card("JSpades",10)
QueD = Card("QDiamonds",10)
QueC = Card("QClubs",10)
QueH = Card("QHearts",10)
QueS = Card("QSpades",10)
KinD = Card("KDiamonds",10)
KinC = Card("KClubs",10)
KinH = Card("KHearts",10)
KinS = Card("KSpades",10)

full_deck = [
AD, AC, AH, AS,
TwoD, TwoC, TwoH, TwoS,
ThrD, ThrC, ThrH, ThrS,
FouD, FouC, FouH, FouS,
FivD, FivC, FivH, FivS,
SixD, SixC, SixH, SixS,
SevD, SevC, SevH, SevS,
EigD, EigC, EigH, EigS,
NinD, NinC, NinH, NinS,
TenD, TenC, TenH, TenS,
JacD, JacC, JacH, JacS,
QueD, QueC, QueH, QueS,
KinD, KinC, KinH, KinS
]

# full_deck is not used as the playing deck. instead, playing decks will copy the cards from full_deck
# this is so that cards can be dealt, removed, or added back without messing up the full_deck for future games

def print_cards(hand):
	for card in hand:
		print card.name,
	print ""
	
def reset_deck(deck):
	for deck_row in full_deck:
		for card in deck_row:
			deck.append(card)

def deal_card(deck):
	# bug(phaffywaffle):	random.choice() throws an error upon receiving an empty list, meaning if you
	#			choose to hit ~50 times and deplete the deck, the program crashes hard. This
	#			can be handled by checking for an empty list and returning None in that case.
	if deck:
		card = random.choice(deck)
		deck.remove(card)
		return card
	return None
	
def blackjack_game(play_deck):

	current_deck = play_deck

	dealer_hand = []
	player_hand = []

	dealer_hand.append(deal_card(current_deck))
	dealer_hand.append(deal_card(current_deck))
	player_hand.append(deal_card(current_deck))
	player_hand.append(deal_card(current_deck))

	print "Dealer:"
	print "???", dealer_hand[1].name


	def add_card():
		print "You:"
		print_cards(player_hand)
		hit_or_nah = raw_input("Hit? Type Y or N: ")
		hit_or_nah = hit_or_nah.upper()
		if hit_or_nah == "Y":
			new_card = deal_card(current_deck)
			if new_card:
				player_hand.append(new_card)
				add_card()
			else:
				print("There are no cards left!")
		elif hit_or_nah == "N":
			None
		else:
			print "That's not a valid answer! Please type Y or N, and don't leave spaces after."
			add_card()
	add_card()
	# will later implement a scenario where the deck runs out of cards

	dealer_sum = 0
	for card in dealer_hand:
		dealer_sum += card.value

	while dealer_sum < 17:
		new_card = deal_card(current_deck)
		if new_card:
			dealer_hand.append(new_card)
			dealer_sum += new_card.value
		else:
			print("There are no cards left for the dealer either!")
			break
	# bug(phaffywaffle):	Program hangs forever in the while loop if the player's hand is >= 21 and does
	# 			not contain an Ace. Quick & dirty way to fix is to remove the loops and add
	#			separate if conditions for the four aces. Also should account for multiple
	#			aces, but there's likely a more elegant solution out there
	if (AD in dealer_hand and dealer_sum > 21):
		dealer_sum -= 10
	if (AC in dealer_hand and dealer_sum > 21):
		dealer_sum -= 10
	if (AH in dealer_hand and dealer_sum > 21):
		dealer_sum -= 10
	if (AS in dealer_hand and dealer_sum > 21):
		dealer_sum -= 10
	# unfortunately, I haven't figured out how to account for cases where dealer has more than one ace
	# traditionally, dealers have to automatically deal cards themselves until they're 17 or over
	# the code subtracts 10 for each ace if the dealer's sum is over 21
	# but I haven't figured out how to add cards again if the sum turns out to be lower than 17

	player_sum = 0
	for card in player_hand:
		player_sum += card.value		

	# note(phaffywaffle): Same deal as line 115
	if (AD in player_hand and player_sum > 21):
		player_sum -= 10
	if (AC in player_hand and player_sum > 21):
		player_sum -= 10
	if (AH in player_hand and player_sum > 21):
		player_sum -= 10
	if (AS in player_hand and player_sum > 21):
		player_sum -= 10

	#for debugging:
	#print dealer_sum
	#print_cards(dealer_hand)
	#print player_sum
	#print_cards(player_hand)

	if player_sum > 21:
		print "You:"
		print_cards(player_hand)
		print "You went over 21. You lost!"
	else:
		print "Dealer:"
		print_cards(dealer_hand)
		print "You:"
		print_cards(player_hand)
		if dealer_sum > 21:
			print "You won!"
		elif player_sum > dealer_sum:
			print "You won!"
		elif dealer_sum > player_sum:
			print "You lost!"
		else:
			print "Tie!"

	play_again = raw_input("Play again? Y for yes, other for no: ")
	play_again = play_again.upper()
	if play_again == "Y" or play_again == "YES":
		reset = raw_input("Reset deck? Y for yes, other for no: ")
		reset = reset.upper()
		if reset == "Y" or reset == "YES":
			blackjack_game(full_deck)
		elif current_deck:
			blackjack_game(current_deck)
		else:
			print("Deck is empty, resetting anyway...")
			blackjack_game(full_deck)
	else:
		None # later will code a part that will let player go back to game selection

print \
"""What game would you like to play?

Available games:
	Blackjack
Type anything else to leave the casino.
	\n"""
game_request = raw_input()
game_request = game_request.lower()

if "blackjack" in game_request:
	blackjack_game(full_deck)
	print "\n"
else:
	"Thanks for coming! Goodbye!"




