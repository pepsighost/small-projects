# Kate's "casino"

# A beginner-level game of blackjack, one deck, no splitting
# When I get good enough, I think I might turn this into a mini app or something that includes multiple card games.


import random

full_deck = [
	["ADiamonds", "AClubs", "AHearts", "ASpades",],
	["2Diamonds", "2Clubs", "2Hearts", "2Spades",],
	["3Diamonds", "3Clubs", "3Hearts", "3Spades",],
	["4Diamonds", "4Clubs", "4Hearts", "4Spades",],
	["5Diamonds", "5Clubs", "5Hearts", "5Spades",],
	["6Diamonds", "6Clubs", "6Hearts", "6Spades",],
	["7Diamonds", "7Clubs", "7Hearts", "7Spades",],
	["8Diamonds", "8Clubs", "8Hearts", "8Spades",],
	["9Diamonds", "9Clubs", "9Hearts", "9Spades",],
	["10Diamonds", "10Clubs", "10Hearts", "10Spades",],
	["JDiamonds", "JClubs", "JHearts", "JSpades",],
	["QDiamonds", "QClubs", "QHearts", "QSpades",],
	["KDiamonds", "KClubs", "KHearts", "KSpades"],
	] 
# each sub-list, or row, is accessible by its index, and contains cards with the same number
# this makes it possible to create a dictionary for a game and set values for every card with the same number
# e.g. full_deck[2] is the list of cards with 3, so we may set each card in that row to have a value of 3
# full_deck is not used as the playing deck. instead, playing decks will copy the cards from full_deck
# this is so that cards can be dealt, removed, or added back without messing up the full_deck for other games, and also easier to deal cards because cards aren't contained in sub-lists


def set_card_values(deck_row, value, game): 
	for card in deck_row:
		game[card] = value
# this is the function that sets the values for each card in a game
# "deck_row" should be full_deck[index of your choice]
# "value" will be what value you wish the cards you've chosen to be worth
# "game" is the dictionary of the card values for the game (usually named as gamename_val)
# e.g. in blackjack, face cards have a value of 10

def print_cards(hand):
	for card in hand:
		print card,
	print ""
	
def reset_deck(deck):
	for deck_row in full_deck:
		for card in deck_row:
			deck.append(card)

def deal_card(deck):
	card = random.choice(deck)
	deck.remove(card)
	return card
	
# note(phaffywaffle):	A new game can now be started with 'blackjack_game(None)', and a new game can be started
#			with 'blackjack_game(<old deck>)'.
#			See line 169 for details
def blackjack_game(old_deck):

	if old_deck:
		current_deck = old_deck
	else:
		current_deck = []
		reset_deck(current_deck)

	blackjack_val = { }

	set_card_values(full_deck[0], 11, blackjack_val)
	set_card_values(full_deck[1], 2, blackjack_val)
	set_card_values(full_deck[2], 3, blackjack_val)
	set_card_values(full_deck[3], 4, blackjack_val)
	set_card_values(full_deck[4], 5, blackjack_val)
	set_card_values(full_deck[5], 6, blackjack_val)
	set_card_values(full_deck[6], 7, blackjack_val)
	set_card_values(full_deck[7], 8, blackjack_val)
	set_card_values(full_deck[8], 9, blackjack_val)
	set_card_values(full_deck[9], 10, blackjack_val)
	set_card_values(full_deck[10], 10, blackjack_val)
	set_card_values(full_deck[11], 10, blackjack_val)
	set_card_values(full_deck[12], 10, blackjack_val)


	dealer_hand = []
	player_hand = []

	dealer_hand.append(deal_card(current_deck))
	dealer_hand.append(deal_card(current_deck))
	player_hand.append(deal_card(current_deck))
	player_hand.append(deal_card(current_deck))

	print "Dealer:"
	print "???", dealer_hand[1]


	def add_card():
		print "You:"
		print_cards(player_hand)
		hit_or_nah = raw_input("Hit? Type Y or N: ")
		hit_or_nah = hit_or_nah.upper()
		if hit_or_nah == "Y":
			player_hand.append(deal_card(current_deck))
			add_card()
		elif hit_or_nah == "N":
			None
		else:
			print "That's not a valid answer! Please type Y or N, and don't leave spaces after."
			add_card()
	add_card()
	# will later implement a scenario where the deck runs out of cards

	dealer_sum = 0
	for card in dealer_hand:
		dealer_sum += blackjack_val[card]

	while dealer_sum < 17:
		newcard = deal_card(current_deck)
		dealer_hand.append(newcard)
		dealer_sum += blackjack_val[newcard]

	for card in dealer_hand:
		while dealer_sum > 21:
			if ("ADiamonds" in dealer_hand or "AClubs" in dealer_hand or "AHearts" in dealer_hand or "ASpades" in dealer_hand):
				dealer_sum -= 10
	# unfortunately, I haven't figured out how to account for cases where dealer has more than one ace
	# traditionally, dealers have to automatically deal cards themselves until they're 17 or over
	# the code subtracts 10 for each ace if the dealer's sum is over 21
	# but I haven't figured out how to add cards again if the sum turns out to be lower than 17


	player_sum = 0
	for card in player_hand:
		player_sum += blackjack_val[card]		

	for card in player_hand:
		while player_sum > 21:
			if ("ADiamonds" in player_hand or "AClubs" in player_hand or "AHearts" in player_hand or "ASpades" in player_hand):
				player_sum -= 10
		

	#for debugging:
	#print dealer_sum
	#print_cards(dealer_hand)
	#print player_sum
	#print_cards(player_hand)

	if player_sum > 21:
		print "You:"
		print_cards(player_hand)
		print "You went over 21. You lost!"
	else:
		print "Dealer:"
		print_cards(dealer_hand)
		print "You:"
		print_cards(player_hand)
		if dealer_sum > 21:
			print "You won!"
		elif player_sum > dealer_sum:
			print "You won!"
		elif dealer_sum > player_sum:
			print "You lost!"
		else:
			print "Tie!"

	play_again = raw_input("Play again? Y for yes, other for no: ")
	play_again = play_again.upper()
	if play_again == "Y" or play_again == "YES":
		reset = raw_input("Reset deck? Y for yes, other for no: ")
		reset = reset.upper()
		# bug(phaffywaffle): previously, selecting 'y' would reset the current deck, then start another
		# game instance with blackjack_game(), and pressing 'n' would just immediately start a new game.
		# However, in the new instance, reset_deck() was then called immediately anyways, resetting the
		# deck whether or not the reset was requested. Passing in the state of the current deck, like
		# so, should fix this
		if reset == "Y" or reset == "YES":
			blackjack_game(None)
		elif current_deck:
			blackjack_game(current_deck)
		else:
			print("Deck is empty, resetting anyway...")
			blackjack_game(None)
	else:
		None # later will code a part that will let player go back to game selection

print \
"""What game would you like to play?

Available games:
	Blackjack
Type anything else to leave the casino.
	\n"""
game_request = raw_input()
game_request = game_request.lower()

if "blackjack" in game_request:
	blackjack_game(None)
	print "\n"
else:
	"Thanks for coming! Goodbye!"




